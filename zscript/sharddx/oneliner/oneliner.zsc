/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

const SHDX_ONELINER_NORMAL_CHANCE = 25;
const SHDX_ONELINER_GIB_CHANCE = 50;
const SHDX_ONELINER_BOSS_CHANCE = 100;

enum OneLinerFlags
{
	OLSSF_DEFAULT = 0,
	OLSSF_FORCEONELINER = 1,
	OLSSF_BYPASSMUTE = 2,
	OLSSF_BYPASSPLAYERPREFIX = 4,
	OLSSF_NOGRIN = 8,

}

enum OneLinerType
{
	OLTYPE_DEFAULT = 0,
	OLTYPE_EXPLOSIVE = 1,
	OLTYPE_FROZEN = 2,
	OLTYPE_LIGHTNING = 3,
	OLTYPE_TORNADOZER = 4,
	OLTYPE_RAINBOWER = 5,
}

extend class SHDX_Enemy
{
	// Get Oneliner From Type.
	String GetOLSoundForType(SHDX_PlayerPawn pp, int oltype = OLTYPE_DEFAULT)
	{
		String ret;
		if (oltype == OLTYPE_DEFAULT)
			ret = pp.GetDefaultVoiceOver();
		else if (oltype == OLTYPE_EXPLOSIVE)
			ret = pp.GetExplosiveVoiceOver();
		else if (oltype == OLTYPE_FROZEN)
			ret = pp.GetFrozenVoiceOver();
		else if (oltype == OLTYPE_LIGHTNING)
			ret = pp.GetLightningVoiceOver();
		else if (oltype == OLTYPE_TORNADOZER)
			ret = pp.GetTornadoVoiceOver();
		else if (oltype == OLTYPE_RAINBOWER)
			ret = pp.GetRainbowerVoiceOver();
			
		return ret;
	}
	
	// Send the oneliner to the player pawn
	void SHDX_SendOLToPlayerPawn(SHDX_PlayerPawn pp, int r = SHDX_ONELINER_NORMAL_CHANCE, String snd = "", int flags = OLSSF_DEFAULT, int oltype = OLTYPE_DEFAULT)
	{
		String finalsnd;
		
		if (Random[OneLiner](0, 100) <= r)
		{
			if (snd.Length() < 1)
			{
				if (oltype < OLTYPE_DEFAULT)
					oltype = OLTYPE_DEFAULT;
				else if (oltype > OLTYPE_RAINBOWER)
					oltype = OLTYPE_RAINBOWER;
				
				do
				{
					snd = GetOLSoundForType(pp, oltype);
				}
				while (snd == pp.previousol);
			}
			
			if (flags & OLSSF_BYPASSPLAYERPREFIX)
			{
				finalsnd = snd;
			}
			else
			{
				finalsnd = String.Format("%s/%s", pp.OneLinerPrefix, snd);	
				
				if (pp.onelinercount <= 0) 
					pp.previousol = snd;
			}
			
			pp.OneLinerInit(finalsnd, flags);
		}
	}
	
	// Send One Liner to all players
	void A_SHDX_SendOLToAllPlayers(String snd = "", int flags = OLSSF_DEFAULT)
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo pl = players[i];
			if (pl && pl.mo)
			{
				let pp = SHDX_PlayerPawn(pl.mo);
				if (pp)
				{
					String finalsnd;
					
					if (flags & OLSSF_BYPASSPLAYERPREFIX)
					{
						finalsnd = snd;
					}
					else
					{
						finalsnd = String.Format("%s/%s", pp.OneLinerPrefix, snd);
					}
					
					pp.OneLinerInit(finalsnd, flags);
				}
			}
		}
	}
	
	// Give just the target (killer) a one-liner
	void A_SHDX_GivePlayerOneLiner(int r = SHDX_ONELINER_NORMAL_CHANCE, String snd = "", int flags = OLSSF_DEFAULT, int oltype = OLTYPE_DEFAULT)
	{
		if (!target)
			return;
			
		if (iscorpse)
			return;
		
		let SHDXpl = SHDX_PlayerPawn(target);
		if (SHDXpl)
		{
			SHDX_SendOLToPlayerPawn(SHDXpl, r, snd, flags, oltype);
		}
		else
		{
			let eb = SHDX_ExplodeyProp(target);
			if (eb)
			{
				let SHDXpl2 = SHDX_PlayerPawn(eb.target);
				if (SHDXpl2)
				{
					SHDX_SendOLToPlayerPawn(SHDXpl2, r, snd, flags, oltype);
				}
			}
		}
	}
}

extend class SHDX_PlayerPawn
{
	const ONELINER_COOLDOWN_MAX = TICRATE * 5;
	const ONELINER_TIME_TO_SING = TICRATE * 60;
	const ONELINER_TIME_TO_SING_END = ONELINER_TIME_TO_SING + (TICRATE * 30);
	const ONELINER_USE_LOCKED_MAX = 3;
	
	int onelinercount;		// One Liner Counter
	bool onelinerhit;		// One Liner Flag
	Sound onelinersnd;		// One Liner Sound
	bool onelinermute;		// One Liner Vox Mute (can be bypassed)
	String previousol;		// Previous One Liner as a string
	
	meta String OneLinerPrefix;
	Property OneLinerPrefix: OneLinerPrefix;
	
	void ResetOneLinerMute()
	{
		onelinermute = false;
	}
	
	String GetDefaultVoiceOver()
	{
		String snd;
		
		snd = String.Format("voiceover%d", Random[OneLiner](1, 12));
		
		return snd;
	}
	
	String GetExplosiveVoiceOver()
	{
		String snd;
		
		if (!Random[OneLiner](0, 1))
			snd = GetDefaultVoiceOver();
		else
			snd = String.Format("explosive%d", Random[OneLiner](1, 2));
		
		
		return snd;
	}
	
	String GetFrozenVoiceOver()
	{
		String snd;
		
		if (!Random[OneLiner](0, 1))
			snd = GetDefaultVoiceOver();
		else
			snd = String.Format("frozen%d", Random[OneLiner](1, 3));
			
		return snd;
	}
	
	String GetLightningVoiceOver()
	{
		String snd;
		
		if (!Random[OneLiner](0, 1))
			snd = GetDefaultVoiceOver();
		else
			snd = String.Format("lightning%d", Random[OneLiner](1, 2));
			
		return snd;
	}
	
	String GetTornadoVoiceOver()
	{
		String snd;
		
		if (!Random[OneLiner](0, 1))
			snd = GetDefaultVoiceOver();
		else
			snd = String.Format("tornado%d", Random[OneLiner](1, 4));
			
		return snd;
	}
	
	String GetRainbowerVoiceOver()
	{
		String snd;
		
		if (!Random[OneLiner](0, 1))
			snd = GetDefaultVoiceOver();
		else
			snd =  "rainbower";
			
		return snd;
	}
	
	bool CheckOneLinerCVar()
	{
		if (player)
			return Cvar.GetCVar('shdx_snd_oneliners', player).GetBool();
		
		return false;
	}
	
	void OneLinerInit(Sound snd, int flags = OLSSF_DEFAULT)
	{
		if (!CheckOneLinerCVar())
			return;
		
		if (health <= 0)
			return;
			
		if (onelinercount <= 0 || flags & OLSSF_FORCEONELINER)
			onelinercount = ONELINER_COOLDOWN_MAX;
		
		if (onelinermute && !(flags & OLSSF_BYPASSMUTE))
		{
			onelinercount = 0;
			return;	
		}
		
		onelinersnd = snd;
		
		if (onelinercount >= ONELINER_COOLDOWN_MAX)
		{
			onelinerhit = true;
			
			if (SHDX_Utilities.CheckSoundExists(onelinersnd))
				OneLinerSound(onelinersnd);
			
			if (!(flags & OLSSF_NOGRIN))
				A_SetMugshotState("Grin");
		}
	}
	
	void OLSubtitle(String str, Sound snd)
	{
		SHDX_Vox.SendSubtitleToHandler(StringTable.Localize(str), SHDX_Vox.GetSecondsFromSound(snd));
	}
	
	// Check if oneliner requires subtitles
	virtual void CheckIfOneLinerRequiresSubtitles(Sound snd)
	{
		if (snd == "scootaloo/surprisestart")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS1_1", snd);
		}
		else if (snd == "scootaloo/surpriseend")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS1_2", snd);
		}
		else if (snd == "scootaloo/enforcer")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_ENFORCER", snd);
		}
		else if (snd == "scootaloo/bathroom")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BATHROOM", snd);
		}
		else if (snd == "scootaloo/atmospherestart")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS2_1", snd);
		}
		else if (snd == "scootaloo/atmosphereend")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS2_2", snd);
		}
		else if (snd == "scootaloo/sorryorion")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_ORIONWASP", snd);
		}
		else if (snd == "scootaloo/maimbowundashstart")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS3_1", snd);
		}
		else if (snd == "scootaloo/maimbowundashendgood")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS3_2", snd);
		}
		else if (snd == "scootaloo/maimbowundashendbad")
		{
			OLSubtitle("$SHDX_VOX_SCOOTALOO_BOSS3_3", snd);
		}
	}
	
	void OneLinerSound(Sound snd)
	{
		A_StartSound(snd, SHDXPLAYER_DIALOGUECHANNEL1, CHANF_DEFAULT, 4.0, ATTN_NORM);
		
		CheckIfOneLinerRequiresSubtitles(snd);
	}
	
	void A_StopOneLinerSound()
	{
		A_StopSound(SHDXPLAYER_DIALOGUECHANNEL1);
	}
	
	// Perform Voice One Liner Actions
	void OneLinerProcess()
	{		
		if (onelinerhit)
		{
			if (onelinercount > 0)
				onelinercount--;
			
			if (onelinercount <= 0)
			{
				onelinercount = 0;
				onelinersnd = "";
				onelinerhit = false;
			}
		}
	}
}

