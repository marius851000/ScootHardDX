/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

class SHDX_CreditMapEvent : EventHandler
{
	ui int seconds;
	bool ispressinguse[MAXPLAYERS];
	ui int useticker;
	
	const SECONDS_CREDITSTART = 0;
	
	const SECONDS_FADETIME = 7;
	const SECONDS_HOLDTIME = SECONDS_FADETIME + 2;
	const SECONDS_FADETIME_ADDITIONAL = 14;
	const SECONDS_HOLDTIME_ADDITIONAL = SECONDS_FADETIME_ADDITIONAL + 2;
	const SECONDS_SCROLLTIME = 4;
	const SECONDS_BREAK = 2;
	
	const MAX_STAGES = 19;
	const ADDITIONAL_CODE = MAX_STAGES - 1;
	
	ui int creditx, credity;
	ui int holdtime;
	ui int stage;
	ui int ticdelta;
	ui double alpha;
	ui double alpha2;
	
	override void OnRegister()
	{
		SetOrder(1);
	}
	
	ui void DrawImageWithOffsets(string texturepath, int x, int y, Vector2 ss, bool centered = false, double a = 1.0)
	{
		if (texturepath.Length() > 0)
		{
			TextureID rid = TexMan.CheckForTexture(texturepath, TexMan.Type_Any);
			int _rw, _rh;
			[_rw, _rh] = TexMan.GetSize(rid);
			
			Vector2 size = TexMan.GetScaledSize(rid);
			Vector2 scale = (size / 2);
			scale.x *= 1.333;
			
			Screen.DrawTexture(rid, false, x, y, 
							DTA_VirtualWidthF, ss.x, DTA_VirtualHeightF, ss.y, DTA_CenterOffset, centered,
							DTA_DestWidth, int(scale.x), DTA_DestHeight, int(scale.y), DTA_KeepRatio, false,
							DTA_LegacyRenderStyle, STYLE_Translucent,
							DTA_Alpha, a,
							DTA_Masked, false);
		}
	}
	
	ui void DrawCreditWithPic(string picname, string role, string person, int x, int y, Vector2 ss, double a = 1.0)
	{
		String pfp;
		int ofs;
		
		if (picname.Length() > 0)
			pfp = String.Format("%s%s", "graphics/credits/", picname);
		else
			pfp = "";
			
		if (pfp != "")
		{
			ofs = 64;
		}
		
		Screen.DrawText("BIGFONT", Font.CR_CYAN, x+ofs, y, StringTable.Localize(role),
							DTA_VirtualWidthF,  ss.x,
							DTA_VirtualHeightF, ss.y,
							DTA_KeepRatio, true,
							DTA_Alpha, a);
		
		Screen.DrawText("BIGFONT", Font.CR_CYAN, x+ofs, y+64, StringTable.Localize(person),
							DTA_VirtualWidthF,  ss.x,
							DTA_VirtualHeightF, ss.y,
							DTA_KeepRatio, true,
							DTA_Alpha, a);
		if (pfp != "")	
			DrawImageWithOffsets(pfp, x-64, y+32, ss, true, a);					
	}
	
	ui void CheckIfPressingUse()
	{
		if (ispressinguse[consoleplayer])
		{
			if (++useticker > TICRATE * 5)
			{
				SendNetworkEvent("ExitLevel", 0, 0, 0);
				useticker = 0;
			}
		}
		else
		{
			useticker = 0;
		}
	}
	
	override bool InputProcess(InputEvent e)
	{
		Array<int> keys;
		Bindings.GetAllKeysForCommand(keys, "+use");
		
		for (int i = 0; i < keys.Size(); i++)
		{
			if (e.Keyscan == keys[i])
			{
				SendNetworkEvent("ToggleUseHold", e.Type == e.Type_KeyDown, consoleplayer);
			}
		}
		
		return false;
	}
	
	override void UITick()
	{
		CheckIfPressingUse();
		
		if (ticdelta <= 0)
		{
			ticdelta = int(floor(gametic / TICRATE));
			alpha = 1.0;
			alpha2 = 0.0;
		}
		
		ticdelta++;
		
		if (!(ticdelta % TICRATE))
		{
			seconds++;
		}
		
		if (stage < ADDITIONAL_CODE && seconds > SECONDS_HOLDTIME)
		{
			seconds = 0;
			stage++;
			alpha = 1.0;
		}
		else if (stage == ADDITIONAL_CODE && seconds > SECONDS_HOLDTIME_ADDITIONAL)
		{
			seconds = 0;
			stage++;
			alpha = 1.0;
		}
		else if (stage == MAX_STAGES && seconds > (SECONDS_HOLDTIME * 3))
		{
			seconds = 0;
			stage++;
			alpha = 1.0;
			alpha2 = 0.0;
		}
		else if (stage >= MAX_STAGES+1)
		{
			seconds = 0;
			alpha = 0.0;
			alpha2 = 1.0;
			SendNetworkEvent("ExitLevel", 0, 0, 0);
		}
	}

	// Override the RenderOverlay
	override void RenderOverlay(RenderEvent e)
	{
		PlayerInfo p = players[consoleplayer];
		
		if (p && p.mo)
		{			
			if (seconds >= SECONDS_CREDITSTART)
			{
				Vector2 hs = StatusBar.GetHUDScale();
				Vector2 ss = (Screen.GetWidth()/hs.x,Screen.GetHeight()/hs.y);
				
				Font fnt = "bigfont";
				
				String str = StringTable.Localize("$SHDX_CREDITTEAMSCOOTHARDDX");
				
				int len = fnt.StringWidth(str) / 2;
									
				String av;
				String role;
				String credit;
				
				if (stage == 0)
				{
					av = "sanya.png";
					role = "$SHDX_CREDITCREATIVEDIRECTOR";
					credit = "$SHDX_CREDITSANYA";
				}
				else if (stage == 1)
				{
					av = "metal.png";
					role = "$SHDX_CREDITMUSIC";
					credit = "$SHDX_CREDITMETAL";
				}
				else if (stage == 2)
				{
					av = "ellie.png";
					role = "$SHDX_CREDITLEVEL";
					credit = "$SHDX_CREDITELLIE";
				}
				else if (stage == 3)
				{
					av = "marisa.png";
					role = "$SHDX_CREDITADDITIONAL";
					credit = "$SHDX_CREDITJONA";
				}
				else if (stage == 4)
				{
					av = "phil.png";
					role = "$SHDX_CREDITADDITIONAL2";
					credit = "$SHDX_CREDITPHIL";
				}
				else if (stage == 5)
				{
					av = "scootaloo.png";
					role = "$SHDX_CREDITSCOOTALOO";
					credit = "$SHDX_CREDITVICTORIA";
				}
				else if (stage == 6)
				{
					av = "dexby.png";
					role = "$SHDX_CREDITLOWGUARDMALE";
					credit = "$SHDX_CREDITDRP";
				}
				else if (stage == 7)
				{
					av = "tab.png";
					role = "$SHDX_CREDITLOWGUARDFEMALE";
					credit = "$SHDX_CREDITTABBY";
				}
				else if (stage == 8)
				{
					av = "dane.png";
					role = "$SHDX_CREDITENGINEER";
					credit = "$SHDX_CREDITMOVIEUNLEASHERS";
				}
				else if (stage == 9)
				{
					av = "cakeofrage.png";
					role = "$SHDX_CREDITSURPRISE";
					credit = "$SHDX_CREDITCAKE";
				}
				else if (stage == 10)
				{
					av = "atmos.png";
					role = "$SHDX_CREDITATMOS";
					credit = "$SHDX_CREDITRED";
				}
				else if (stage == 11)
				{
					av = "jenna.png";
					role = "$SHDX_CREDITMAIMBOW";
					credit = "$SHDX_CREDITJENNA";
				}
				else if (stage == 12)
				{
					av = "auroradawn.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITAURORADAWN";
				}
				else if (stage == 13)
				{
					av = "woodentoaster.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITWOODENTOASTER";
				}
				else if (stage == 14)
				{
					av = "jinzo.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITJINZO";
				}
				else if (stage == 15)
				{
					av = "korzodin.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITKORZODIN";
				}
				else if (stage == 16)
				{
					av = "zan.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITZAN";
				}
				else if (stage == 17)
				{
					av = "accensus.png";
					role = "$SHDX_CREDITSPECIALTHANKS";
					credit = "$SHDX_CREDITACCENSUS";
				}
				else if (stage == ADDITIONAL_CODE)
				{
					av = "";
					role = "$SHDX_CREDITADDITIONALCODE";
					credit = "$SHDX_CREDITADDITIONALCODE2";
				}
				
				if (stage < ADDITIONAL_CODE)
				{
					if (seconds >= (SECONDS_FADETIME))
					{
						if (!(ticdelta % (TICRATE / 7)))
						{
							alpha -= 0.025;
							if (alpha <= 0.0)
							{
								alpha = 0.0;
							}
						}
					}
					
					Screen.DrawText("BIGFONT", Font.CR_CYAN, (ss.x/2 - len), 0, str,
									DTA_VirtualWidthF,  ss.x,
									DTA_VirtualHeightF, ss.y,
									DTA_KeepRatio, true,
									DTA_Alpha, 1.0);
					
					DrawCreditWithPic(av, role, credit, ss.x/3, ss.y/3, ss, alpha);
				}
				else if (stage == ADDITIONAL_CODE)
				{
					if (seconds >= SECONDS_FADETIME_ADDITIONAL)
					{
						if (!(ticdelta % (TICRATE / 7)))
						{
							alpha -= 0.025;
							if (alpha <= 0.0)
							{
								alpha = 0.0;
							}
						}
					}
					
					Screen.DrawText("BIGFONT", Font.CR_CYAN, (ss.x/2 - len), 0, str,
									DTA_VirtualWidthF,  ss.x,
									DTA_VirtualHeightF, ss.y,
									DTA_KeepRatio, true,
									DTA_Alpha, 1.0);
					
					DrawCreditWithPic(av, role, credit, ss.x/3, ss.y/3, ss, alpha);
				}
				else if (stage == MAX_STAGES)
				{
					if (seconds >= SECONDS_HOLDTIME_ADDITIONAL)
					{
						if (!(ticdelta % (TICRATE / 7)))
						{
							alpha -= 0.005;
							alpha2 += 0.005;
							if (alpha <= 0.0)
							{
								alpha = 0.0;
								S_ChangeMusic("");
							}
							if (alpha2 >= 1.0)
							{
								alpha2 = 1.0;
							}
						}
						SetMusicVolume(alpha);
					}
					
					Screen.Dim(0x000000, alpha2, 0, 0, Screen.GetWidth(), Screen.GetHeight());
					
					Screen.DrawText("BIGFONT", Font.CR_CYAN, (ss.x/2 - len), 0, str,
									DTA_VirtualWidthF,  ss.x,
									DTA_VirtualHeightF, ss.y,
									DTA_KeepRatio, true,
									DTA_Alpha, alpha);
					
					String str2 = StringTable.Localize("$SHDX_CREDITTHANKS");
					
					int len2 = fnt.StringWidth(str2) / 2;
					
					Screen.DrawText("BIGFONT", Font.CR_CYAN, (ss.x/2-len2), ss.y/3, str2,
										DTA_VirtualWidthF,  ss.x,
										DTA_VirtualHeightF, ss.y,
										DTA_KeepRatio, true,
										DTA_Alpha, alpha);
					
					if (level.mapname ~== "CREDITS1")
						str2 = StringTable.Localize("$SHDX_CREDITFINDAURORA");
					else if (level.mapname ~== "CREDITS2")
						str2 = StringTable.Localize("$SHDX_CREDITGOODEND");
					
					len2 = fnt.StringWidth(str2) / 2;
					
					Screen.DrawText("BIGFONT", Font.CR_CYAN, (ss.x/2-len2), ss.y/3 + 64, str2,
										DTA_VirtualWidthF,  ss.x,
										DTA_VirtualHeightF, ss.y,
										DTA_KeepRatio, true,
										DTA_Alpha, alpha);
				}
				else if (stage >= MAX_STAGES)
				{
					Screen.Dim(0x000000, 1.0, 0, 0, Screen.GetWidth(), Screen.GetHeight());
				}
			}
		}
	}
	
	override void PlayerSpawned(PlayerEvent e)
	{
		PlayerInfo player = players[e.PlayerNumber];
		if (player)
		{
			player.cheats |= CF_TOTALLYFROZEN;
			player.mo.A_GiveInventory("SHDX_HudDisable", 1);
		}
	}
	
	override void PlayerEntered(PlayerEvent e)
	{
		PlayerInfo player = players[e.PlayerNumber];
		if (player)
		{
			player.cheats |= CF_TOTALLYFROZEN;
			player.mo.A_GiveInventory("SHDX_HudDisable", 1);
		}
	}
	
	override void PlayerDisconnected(PlayerEvent e)
	{
		PlayerInfo player = players[e.PlayerNumber];
		if (player)
		{
			player.cheats &= ~CF_TOTALLYFROZEN;
			player.mo.A_TakeInventory("SHDX_HudDisable", 255);
		}
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name ~== "ExitLevel")
		{
			level.ExitLevel(0, false);
		}
		
		if (e.Name ~== "ToggleUseHold")
		{
			ispressinguse[e.Args[1]] = e.Args[0];
		}
	}
}