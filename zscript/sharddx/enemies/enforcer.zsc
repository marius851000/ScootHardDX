/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_ClusterGrenade : SHDX_Projectile
{
	Default
	{
		Radius 7;
		Height 14;
		Speed 25;
		Damage 5;
		DamageType "Explosive";
		
		Scale 0.12;
		Mass 25;
		
		BounceCount 5;
		BounceType "Hexen";
        BounceFactor 0.65;
        WallBounceFactor 0.7;
		
		Gravity 0.75;
		
		BounceSound "enforcer/clusterbombb";
		
		+CanBounceWater
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (victim && victim != target)
		{
			let hbx = SHDX_Hitbox(victim);
			if (hbx && hbx.iscorpse)
			{
				return 1;
			}
			
			if (victim is "SHDX_Enemy")
			{
				return -1;
			}
		}
		
		return Super.SpecialMissileHit(victim);
	}

	States
	{
		Spawn:
			CLST ABCD 1 Bright;
			CLST D 0 Bright
			{
				bNoGravity = false;
			}
			CLST ABCD 1 Bright;
			Loop;
		
		Death:
			EXPL A 3 Bright
			{
				A_StartSound("enforcer/clusterbombx", CHAN_WEAPON);
				A_SetRenderStyle(0.9, STYLE_Add);
				
				for (int i = 0; i < 4; i++)
				{
					A_SpawnProjectile("SHDX_ClusterGrenade2", 32, 0, Random[ClusterGrenade](0, 360), (CMF_AIMDIRECTION|CMF_TRACKOWNER), Random[ClusterGrenade](0, 90));
				}
				
				A_Explode(14, 96, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 40, 128., 80, flags:DE_EXTRAZTHRUST);
				A_Stop();
			}
			EXPL B 3 Bright
			{
				A_Quake(2, 8, 0, 1096);
				A_Stop();
			}
			EXPL CDEFGHI 3 Bright
			{
				A_FadeOut(0.1);
				A_Stop();
			}
			Stop;
	}
}

Class SHDX_ClusterGrenade2 : SHDX_ClusterGrenade
{
	Default
	{
		Radius 4;
		Height 7;
		Speed 10;
		Damage 5;
		DamageType "Explosive";
		
		Scale 0.08;
		Mass 15;
		
		BounceCount 5;
		BounceType "Hexen";
        BounceFactor 0.65;
        WallBounceFactor 0.7;
		
		Gravity 0.75;
		
		BounceSound "enforcer/clusterbombb";
		
		+CanBounceWater
	}

	States
	{
		Death:
			EXPL A 3 Bright
			{
				A_StartSound("enforcer/clusterbombx", CHAN_WEAPON);
				A_SetScale(0.12, 0.12);
				A_SetRenderStyle(0.9, STYLE_Add);
				A_Explode(12, 56, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 32, 64., 72, flags:DE_EXTRAZTHRUST);
				A_Stop();
			}
			EXPL B 3 Bright
			{
				A_Quake(2, 8, 0, 1096);
				A_Stop();
			}
			EXPL CDEFGHI 3 Bright
			{
				A_FadeOut(0.1);
				A_Stop();
			}
			Stop;
	}
}

Class SHDX_WhipProjectile : SHDX_Projectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 50;
		Damage 2;
		Projectile;
		+RANDOMIZE
		DamageType "Whip";
		SeeSound "enforcer/whipattack";
		ActiveSound "enforcer/whipswish";
		Translation "112:127=16:23";
		
		+SEEKERMISSILE
	}
	
	override int DoSpecialDamage(Actor vic, int dmg, Name damagetype)
	{
		if (vic && target)
		{
			if (!vic.bDontThrust)
			{
				Vector3 force = vic.Vec3To(target);
				vic.Vel += force.Unit() * (255. * 64 / max(vic.Mass, 4));
			}
		}
		
		return dmg;
	}
	
	void A_WhipChain()
	{
		A_SeekerMissile(32, 4);
		A_StartSound("enforcer/whipactive", CHAN_BODY);
		Spawn("SHDX_WhipProjectile2", pos, ALLOW_REPLACE);
		Spawn("SHDX_WhipProjectile2", Vec3Offset(-vel.x/2., -vel.y/2., -vel.z/2.), ALLOW_REPLACE);
		Spawn("SHDX_WhipProjectile2", Vec3Offset(-vel.x, -vel.y, -vel.z), ALLOW_REPLACE);
	}
	
	States
	{
		Spawn:
			PLAS AB 2 Bright A_WhipChain;
			Loop;
		Death:
			PLAS C 2 Bright;
			PLAS DE 2;
			Stop;
	}
}

Class SHDX_WhipProjectile2 : SHDX_Actor
{
	Default
	{
		Scale 0.06;
		Translation "112:127=16:23";
		
		+NOBLOCKMAP
		+NOGRAVITY
	}
	
	States
	{
		Spawn:
			PLAS AB 10;
			Stop;
	}
}

Class SHDX_HeavyEnforcer : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ENFOA1
		//$Title "Heavy Enforcer"
		
		Health 350;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 12;
		PainChance 200;
		MeleeRange 80;
		SeeSound "enforcer/sight";
		PainSound "enforcer/pain";
		DeathSound "enforcer/death";
		ActiveSound "enforcer/active";
		Obituary "$SHDX_OB_HEAVYENFORCER";
		Tag "$SHDX_TAG_HEAVYENFORCER";
		Species "Pony";
		DamageFactor "Bullet", 0.25;
		DamageFactor "Explosive", 0.50;
		DamageFactor "Spectrum", 0.1;
		
		-SHDX_Enemy.CanJump
		
		+SHIELDREFLECT
	}
	
	override void Tick()
	{
		Super.Tick();
		if (whipcooldown > 0 && level.time % TICRATE == 0)
		{
			whipcooldown--;
		}
	}
	
	void A_ClusterGrenadeFire()
	{
		A_StartSound("enforcer/clusterbombf", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_ClusterGrenade", 40, -4);
	}
	
	int whipcooldown;
	
	States
	{		
		Spawn:
			ENFO A 10 A_Look;
			Loop;
		See:
			ENFO BCDEBCDE 4 A_Chase;
			Loop;
		Missile:
			ENFO B 0 A_StopSound(CHAN_BODY);
			ENFO B 0
			{
				if (target)
				{
					Vector3 vecd = LevelLocals.Vec3Diff(pos, target.pos);
					if (whipcooldown <= 0 && vecd.z > height && !CheckMeleeRange() && Distance3D(target) <= 512)
					{
						return ResolveState("Missile.Whip");	
					}
				}
				if (CheckMeleeRange())
					return ResolveState("ShieldsUp");
					
				return ResolveState(null);
			}
		Missile.LobGrenade:
			ENFO F 2 A_FaceTarget;
			ENFO G 4 Bright A_ClusterGrenadeFire;
			Goto See;
		Missile.Whip:
			ENFO I 4
			{
				A_StartSound("enforcer/whipinit", CHAN_VOICE);
				A_FaceTarget();
			}
			ENFO I 4
			{
				A_FaceTarget();
				A_SpawnProjectile("SHDX_WhipProjectile");
				whipcooldown = 15;
			}
			ENFO I 4;
			ENFO BCDEBCDE 4 A_Chase(null, null);
			Goto See;
		Pain:
			ENFO J 3;
			ENFO J 3 A_Pain;
			Goto ShieldsUp;
		Pain.Lightning:
			ENFO J 0 A_SetElectrocutionTranslation();
			ENFO J 3;
			ENFO J 3 A_Pain;
			ENFO J 0 A_ResetTranslation();
			Goto ShieldsUp;
		ShieldsUp:
			ENFO H 0
			{
				A_ResetTranslation();
				A_FaceTarget();
				
				A_StartSound("enforcer/shield", CHAN_WEAPON);
				
				if (Random[Enforcer](0, 100) <= 50)
					A_StartSound("enforcer/shieldsup", CHAN_VOICE);
			}
			ENFO H 6
			{
				A_FaceTarget();
				A_SetReflectiveInvulnerable();
			}
			ENFO HHHHHHHHHHHHHH 5
			{
				A_FaceTarget();
			}
			ENFO B 2
			{
				A_FaceTarget();
				A_UnsetReflectiveInvulnerable();
			}
			Goto See;
		Death:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		XDeath:
			ENFO K 0 A_ResetTranslation;
			ENFO K 5 A_NewScream;
			ENFO L 5
			{
				A_NoBlocking();
				A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE);
			}
			ENFO M 5;
			ENFO N 85;
			ENFO O 0 A_StartSound("enforcer/collarbeep", CHAN_BODY, attenuation:0.5);
			ENFO OPOPOP 5;
			EXPL A 0
			{
				A_Explode(176, 128, flags:XF_NOTMISSILE, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 175, 64., 128, flags:DE_EXTRAZTHRUST, DamageType:'Explosive');
				A_StartSound("enforcer/explode", CHAN_7);
				// A_SHDX_ExtremeScreamAndUnblock();
				A_SpawnGibsFx(self);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
		Ice:
			ENF2 I 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE, oltype:OLTYPE_FROZEN);
			ENFO J 315 A_SHDX_FreezeDeath;
			ENFO J 105 A_SHDX_IceShards;
			Wait;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			GIBX D 1;
			GIBX D -1;
			Stop;
	}
}

Class SHDX_Grenade : SHDX_Projectile
{
	Default
	{
		Radius 7;
		Height 14;
		Speed 25;
		Damage 4;
		DamageType "Explosive";
		
		Scale 0.14;
		Mass 25;
		
		BounceCount 5;
		BounceType "Hexen";
        BounceFactor 0.65;
        WallBounceFactor 0.7;
		
		BounceSound "enforcer/grenadeb";
		Deathsound "enforcer/grenadex";
		
		Gravity 0.75;
		
		+CanBounceWater
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if (victim && victim != target)
		{
			let hbx = SHDX_Hitbox(victim);
			if (hbx && hbx.iscorpse)
				return 1;
			
			if (victim is "SHDX_Enemy")
				return -1;
		}
		
		return Super.SpecialMissileHit(victim);
	}

	States
	{
		Spawn:
			GREN ABCD 1 Bright;
			GREN D 0 Bright
			{
				bNoGravity = false;
			}
			GREN ABCD 1 Bright;
			Loop;
		
		Death:
			EXPL A 3 Bright
			{
				A_SetRenderStyle(0.9, STYLE_Add);
				A_Explode(10, 76, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 24, 128., 80, flags:DE_EXTRAZTHRUST);
				A_Stop();
			}
			EXPL B 3 Bright
			{
				A_Quake(2, 8, 0, 1096);
				A_Stop();
			}
			EXPL CDEFGHI 3 Bright
			{
				A_FadeOut(0.1);
				A_Stop();
			}
			Stop;
	}
}

Class SHDX_LightEnforcer : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ENF2A1
		//$Title "Light Enforcer"
		
		Health 225;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 12;
		PainChance 200;
		MeleeRange 80;
		SeeSound "enforcer/sight";
		PainSound "enforcer/pain";
		DeathSound "enforcer/death";
		ActiveSound "enforcer/active";
		Obituary "$SHDX_OB_LIGHTENFORCER";
		Tag "$SHDX_TAG_LIGHTENFORCER";
		Species "Pony";
		DamageFactor "Bullet", 0.25;
		DamageFactor "Explosive", 0.50;
		DamageFactor "Spectrum", 0.1;
		
		-SHDX_Enemy.CanJump
		
		+SHIELDREFLECT
	}
	
	int user_firstenforcer;
	
	void A_GrenadeFire()
	{
		A_StartSound("enforcer/grenadef", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_Grenade", 40, -4);
	}
	
	bool CheckIfFirstEnforcer()
	{
		return (user_firstenforcer >= 1);
	}
	
	States
	{		
		Spawn:
			ENF2 A 10 A_Look;
			Loop;
		See:
			ENF2 BCDEBCDE 4 A_Chase;
			Loop;
		Missile:
			ENF2 B 0 A_StopSound(CHAN_BODY);
			ENF2 B 0
			{
				if (CheckMeleeRange())
					return ResolveState("ShieldsUp");
					
				return ResolveState(null);
			}
		Missile.LobGrenade:
			ENF2 F 2 A_FaceTarget;
			ENF2 G 4 Bright A_GrenadeFire;
			Goto See;
		Pain:
			ENF2 I 3;
			ENF2 I 3 A_Pain;
			Goto ShieldsUp;
		Pain.Lightning:
			ENF2 I 0 A_SetElectrocutionTranslation;
			ENF2 I 3;
			ENF2 I 3 A_Pain;
			ENF2 I 0 A_ResetTranslation;
			Goto ShieldsUp;
		ShieldsUp:
			ENF2 H 0
			{
				A_ResetTranslation();
				
				A_FaceTarget();
				
				A_StartSound("enforcer/shield", CHAN_WEAPON);
				
				if (Random[Enforcer](0, 100) <= 50)
					A_StartSound("enforcer/shieldsup", CHAN_VOICE);
			}
			ENF2 H 6
			{
				A_FaceTarget();
				A_SetReflectiveInvulnerable();
			}
			ENF2 HHHHHHHHHHHHHH 5
			{
				A_FaceTarget();
			}
			ENF2 B 2
			{
				A_FaceTarget();
				A_UnsetReflectiveInvulnerable();
			}
			Goto See;
		Death:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		XDeath:
			ENF2 J 0 A_ResetTranslation;
			ENF2 J 5 A_NewScream;
			ENF2 K 5
			{
				A_NoBlocking();
				
				if (CheckIfFirstEnforcer())
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_BOSS_CHANCE, "scootaloo/enforcer", OLSSF_FORCEONELINER|OLSSF_BYPASSMUTE|OLSSF_BYPASSPLAYERPREFIX|OLSSF_NOGRIN);
				else
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE);
			}
			ENF2 L 5;
			ENF2 M 85;
			ENF2 N 0 A_StartSound("enforcer/collarbeep", CHAN_BODY, attenuation:0.5);
			ENF2 NONONO 5;
			EXPL A 0
			{
				A_Explode(176, 128, flags:XF_NOTMISSILE, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 175, 64., 128, flags:DE_EXTRAZTHRUST, DamageType:'Explosive');
				A_StartSound("enforcer/explode", CHAN_7);
				// A_SHDX_ExtremeScreamAndUnblock();
				A_SpawnGibsFx(self);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
		Ice:
			ENF2 I 0
			{
				if (CheckIfFirstEnforcer())
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_BOSS_CHANCE, "scootaloo/enforcer", OLSSF_FORCEONELINER|OLSSF_BYPASSMUTE|OLSSF_BYPASSPLAYERPREFIX|OLSSF_NOGRIN);
				else
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE, oltype:OLTYPE_FROZEN);
			}
			ENF2 I 315 A_SHDX_FreezeDeath;
			ENF2 I 105 A_SHDX_IceShards;
			Wait;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			GIBX D 1;
			GIBX D -1;
			Stop;
	}
}