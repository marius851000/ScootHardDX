/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_ZombieGibProjectile : SHDX_Projectile
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 8;
		FastSpeed 10;
		Damage 4;
		Mass 30;
		SeeSound "zombie/attack";
		DeathSound "zombie/shotx";
		Scale 0.12;
		Obituary "$SHDX_OB_ZOMBIEGIB";
	}

	States
	{
		Spawn:
			ZGIB AB 2 Bright;
			ZGIB A 0
			{
				bNoGravity = true;
			}
		Spawn1:
			ZGIB BCAB 2;
			Loop;
		
		Death:
			BLOD ABCDE 6;
			Stop;
	}
}

Class SHDX_Zombie : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite ZOMBA2
		//$Title "Zombie (Normal)"
		SeeSound "zombie/sight";
		PainSound "zombie/pain";
		ActiveSound "zombie/active";
		Health 50;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		
		DamageFactor "Normal", 1.00;
		DamageFactor "Bullet", 1.00;
		DamageFactor "Chicken", 1.00;
		DamageFactor "ChickenX", 1.00;
		DamageFactor "Weather", 1.00;
		DamageFactor "RainbowerX", 1.00;
		DamageFactor "Explosive", 1.00;
		DamageFactor "Lightning", 0.50;
		DamageFactor "Ice", 1.00;
		
		PainChance 80;
		PainChance "Normal", 112;
		PainChance "Bullet", 112;
		PainChance "ChickenX", 112;
		PainChance "Spectrum", 112;
		PainChance "Explosive", 160;
		PainChance "Lightning", 160;
		PainChance "Ice", 112;
		
		Obituary "$SHDX_OB_ZOMBIE";
		Tag "$SHDX_TAG_ZOMBIE";
		Species "Zombie";
		
		-SHDX_Enemy.CanJump
	}
	
	bool isdown;
	int overchargecounter;
	
	// Purrmoid Pain
	void A_DD2_ZombiePain()
	{
		A_Pain();
		bNotAutoAimed = true;
		bNoPain = true;
		isdown = true;
	}
	
	// Purrmoid 'coming out of it'
	void A_DD2_ZombieUnPain()
	{
		bNotAutoAimed = false;
		bNoPain = false;
		isdown = false;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (isdown && (mod == 'Normal' || mod == 'Bullet' || mod == 'Weather' || mod == 'Ice'))
			damage = 0;
			
		if (mod == 'Lightning')
			overchargecounter++;
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	States
	{	
		Spawn:
			ZOMB A 10 A_Look;
			loop;
		See:
			ZOMB BCBCBCBC 10 A_Chase;
			Loop;
		Melee:
			ZOMB D 6 A_FaceTarget;
			ZOMB E 4 A_CustomMeleeAttack(Random[Zombie](3, 12), "zombie/melee", "zombie/miss", 'Melee', true);
			Goto See;
		Missile:
			ZOMB D 6 A_FaceTarget;
			ZOMB E 4 A_SpawnProjectile("SHDX_ZombieGibProjectile");
			Goto See;
		Pain:
		Pain.Normal:
		Pain.Bullet:
			ZOMB F 3 A_DD2_ZombiePain;		// feign death...
			ZOMB GHI 3;
			ZOMB J 35 A_SetTics((35 * random[Zombie](4,6)));	// make it feign death
			ZOMB I 2 A_StartSound(SeeSound, CHAN_BODY);
			ZOMB HG 2;
 			ZOMB F 1 A_DD2_ZombieUnPain;	// resurrect!
			Goto See;
			
		Pain.Weather:
			ZOMB F 3;		// feign death...
 			ZOMB F 3 A_Pain;	// resurrect!
			Goto See;
		
		Pain.Lightning:
			ZOMB F 0 A_SetElectrocutionTranslation;
			ZOMB F 3;
			ZOMB F 3 A_Pain;
			ZOMB F 0 A_ResetTranslation;
			Goto See;
			
		Ice:
			ZOMB F 315 A_SHDX_FreezeDeath;
			ZOMB F 105 A_SHDX_IceShards;
			Wait;
			
		Death.Lightning:
			ZOMB F 0 A_SetElectrocutionTranslation;
			ZOMB F 3 A_NewScream;
			ZOMB F 0
			{
				if (overchargecounter >= 4)
					return ResolveState("Death.Lightning.Overcharge");
					
				return ResolveState("Death.Lightning.Normal");
			}
		Death.Lightning.Overcharge:
			ZOMB F 0
			{
				A_RemoveLight('zombielight');
				A_AttachLightDef('zombielight', 'SHDX_ZOMBIEOVERHARGE');
				A_StartSound("zombie/overcharge", CHAN_7);
			}
			ZOMB F 35;
			EXPL A 0
			{
				A_ResetTranslation();
				A_StopSound(CHAN_7);
				A_Explode(176, 128, flags:XF_NOTMISSILE, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 175, 64., 128, flags:DE_EXTRAZTHRUST, DamageType:'Explosive');
				A_StartSound("enforcer/explode", CHAN_6);
				// A_SHDX_ExtremeScreamAndUnblock();
				A_SpawnGibsFx();
			}
			EXPL A 0
			{
				A_RemoveLight('zombielight');
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
			
		Death.Lightning.Normal:
		Death:
			ZOMB F 0 A_ResetTranslation;
			ZOMB F 3 A_SHDX_ExtremeScreamAndUnblock;		// feign death...
			ZOMB GHI 3;
			ZOMB J -1 A_SetCorpseShootable;	// make it feign death
			Stop;
			
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		XDeath:
			GIBX B 3
			{
				A_ResetTranslation();
				A_SHDX_ExtremeScreamAndUnblock();
				A_SpawnGibsFx();
			}
			GIBX BC 5;
			GIBX D 1;
			Stop;
		Death.Spectrum:
			GIBR A 0 A_ResetTranslation;
			GIBR A 4;
			GIBR BC 4;
			GIBR D 1;
			Stop;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			GIBX D 1;
			Stop;
	}
}

Class SHDX_RocketZombie : SHDX_Zombie
{
	Default
	{
		//$Category "Monsters"
		//$Sprite RZOMA2
		//$Title "Zombie (Rocket)"
		SeeSound "zombie/sight";
		PainSound "zombie/pain";
		ActiveSound "zombie/active";
		Health 75;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		
		Obituary "$SHDX_OB_ROCKETZOMBIE";
		Tag "$SHDX_TAG_ROCKETZOMBIE";
		Species "Zombie";
		
		-SHDX_Enemy.CanJump
	}
	
	void A_RocketZombieFire()
	{
		A_SpawnProjectile("SHDX_RocketGuardMissile", 32, -16);
		A_SpawnProjectile("SHDX_RocketGuardMissile", 32, 16);
	}
	
	States
	{	
		Spawn:
			RZOM A 10 A_Look;
			loop;
		See:
			RZOM BCBCBCBC 10 A_Chase;
			Loop;
			
		Melee:
		Missile:
			RZOM A 40
			{
				bNoPain = true;
				A_StartSound("rocketguard/loading", CHAN_WEAPON, attenuation:0.5);
				A_FaceTarget();
			}
			RZOM A 2 A_FaceTarget;
			RZOM D 2 Bright A_RocketZombieFire;
			RZOM E 2
			{
				bNoPain = false;
			}
			Goto See;
		Pain:
		Pain.Normal:
		Pain.Bullet:
			RZOM F 3 A_DD2_ZombiePain;		// feign death...
			RZOM GHI 3;
			RZOM J 35 A_SetTics((35 * random[Zombie](4,6)));	// make it feign death
			RZOM I 2 A_StartSound(SeeSound, CHAN_BODY);
			RZOM HG 2;
 			RZOM F 1 A_DD2_ZombieUnPain;	// resurrect!
			Goto See;
		
		Pain.Lightning:
			RZOM F 0 A_SetElectrocutionTranslation;
			RZOM F 3;
			RZOM F 3 A_Pain;
			RZOM F 0 A_ResetTranslation;
			Goto See;
			
		Ice:
			RZOM F 315 A_SHDX_FreezeDeath;
			RZOM F 105 A_SHDX_IceShards;
			Wait;
		
		Death.Lightning:
			RZOM F 0 A_SetElectrocutionTranslation;
			RZOM F 3 A_NewScream;
			RZOM F 0
			{
				if (overchargecounter >= 4)
					return ResolveState("Death.Lightning.Overcharge");
					
				return ResolveState("Death.Lightning.Normal");
			}
		Death.Lightning.Overcharge:
			RZOM F 0
			{
				A_StartSound("zombie/overcharge", CHAN_7);
				A_RemoveLight('zombielight');
				A_AttachLightDef('zombielight', 'SHDX_ZOMBIEOVERHARGE');
			}
			RZOM F 35;
			EXPL A 0
			{
				A_ResetTranslation();
				A_StopSound(CHAN_7);
				A_Explode(176, 128, flags:XF_NOTMISSILE, damagetype:'Explosive');
				A_StartSound("enforcer/explode", CHAN_6);
				A_SpawnGibsFx();
			}
			EXPL A 0
			{
				A_RemoveLight('zombielight');
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
			
		Death.Lightning.Normal:
		Death:
			RZOM F 0 A_ResetTranslation;
			RZOM F 3 A_SHDX_ExtremeScreamAndUnblock;		// feign death...
			RZOM GHI 3;
			RZOM J -1 A_SetCorpseShootable;	// make it feign death
			Stop;
			
		Death.Lightning.Normal:
		Death:
			RZOM F 0 A_ResetTranslation;
			RZOM F 3 A_SHDX_ExtremeScreamAndUnblock;		// feign death...
			RZOM GHI 3;
			RZOM J -1 A_SetCorpseShootable;	// make it feign death
			Stop;
	}
}