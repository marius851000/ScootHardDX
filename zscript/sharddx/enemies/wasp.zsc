/*
Copyright 2021 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_SpecraWaspLaser : SHDX_Projectile
{
	Default
	{
		Radius 10;
		Height 10;
		Speed 24;
		Damage 5;
		DamageType "Lightning";
		Scale 0.1;
		RenderStyle "Add";
		Alpha 0.6;
		SeeSound "spectrawasp/attacklaserf";
		DeathSound "spectrawasp/attacklaserx";
	}

	States
	{
		Spawn:
			SPLZ A 3 Bright;
			Loop;
		
		Death:
			SPLZ EFG 4 Bright;
			Stop;
	}
}

Class SHDX_SpectraWaspBall : SHDX_Projectile
{
	Default
	{
		Radius 6;
		Height 8;
		Speed 35;
		FastSpeed 45;
		Damage 4;
		DamageType "Spectrum";
		RenderStyle "Add";
		Alpha 0.6;
		SeeSound "spectrawasp/attackspectraf";
		DeathSound "spectrawasp/attackspectrax";
		
		-NoGravity
	}

	void A_SpawnPuddle()
	{
		Actor tfx = Spawn("SHDX_SpectraWaspPuddle", (self.pos.x, self.pos.y, floorz), ALLOW_REPLACE);
		tfx.master = self.target;
		tfx.target = self.target;
	}
	
	States
	{
		Spawn:
			SPBL A 4 Bright;
			Loop;
		
		Death:
			SPBL A 0 A_SpawnPuddle;
			Stop;
	}
}

Class SHDX_SpectraWaspPuddle : SHDX_LiquidPuddle
{
	Default
	{
		Radius 16;
		Height 1;
		
		Obituary "$SHDX_OB_SPECTRAWASPPUDDLE";
		
		-NoBlockMap
		+SOLID
		+Special
	}
	
	const SPECTRUMCTRMAX = 80;
	int spectrumpuddlectr;
	
	state A_StretchPuddle()
	{		
		A_SetScale(Scale.X + 0.01, Scale.Y + 0.01);
		
		strechloop++;
		
		if (strechloop >= STRECHPUDDMAX)
			return ResolveState("Remain");
			
		return ResolveState(null);
	}
	
	void SpawnRedParticles()
	{
		for (int i = 0; i < 16; i++)
		{
			A_SpawnParticle("FF382A", SPF_FULLBRIGHT, (TICRATE * 3), 4, 0, Random[SpectraPuddle](-24,24), Random[SpectraPuddle](-24,24), 0, 0, 0, Random[SpectraPuddle](2, 4), fadestepf:0.05);
		}
	}
	
	override void Touch(Actor toucher)
	{
		if (level.time % 12 == 0)
			toucher.DamageMobj(master, self, 15, 'Spectrum');
	}
	
	States
	{
		Spawn:
			SPPL A 1 NoDelay Bright A_StretchPuddle;
			Loop;
		
		Remain:
			"####" A 5 Bright
			{
				spectrumpuddlectr++;
				
				SpawnRedParticles();
				
				if (spectrumpuddlectr >= SPECTRUMCTRMAX)
					return ResolveState("FadeOat");
				
				return ResolveState(null);
			}
			Loop;
			
		FadeOat:
			"####" A 1
			{
				A_FadeTo(0.0, 0.1, true);
			}
			Wait;
	}
}

Class SHDX_SpectraWasp : SHDX_Enemy
{
	Default
	{
		//$Title "SpectraWasp"
		//$Sprite WASPA8A2
		
		Health 300;
		Radius 20;
		Height 44;
		Mass 400;
		Speed 8;
		FloatSpeed 8;
		
		SeeSound "spectrawasp/sight";
		DeathSound "spectrawasp/death";
		ActiveSound "spectrawasp/active";
		Obituary "$SHDX_OB_SPECTRAWASP";
		
		Species "SpectraEnemy";
		
		Tag "$SHDX_TAG_SPECTRAWASP";

		-FloorClip
		+Float
		+NoGravity
		+DontThrust
		+NoPain
		+NoIceDeath
		
		-SHDX_Enemy.CanJump
		-SHDX_Enemy.CanSwim
	}
	
	int user_orionwasp;
	
	state A_SpectraWaspAttackChoose()
	{
		A_FaceTarget();
		
		if (!(random[SpectraWasp](1, 5) % 2))
			return ResolveState("Missile.Puddle");
		
		return ResolveState("Missile.Laser");
	}

	void A_SpawnSpectrumPuddle()
	{
		Actor tfx = Spawn("SHDX_SpectraWaspPuddle", (self.pos.x, self.pos.y, floorz), ALLOW_REPLACE);
		tfx.master = self.target;
		tfx.target = self.target;
	}
	
	bool CheckIfOrionWasp()
	{
		return (user_orionwasp >= 1);
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		A_StartSound("spectrawasp/pain", CHAN_7);
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	States
	{
		Spawn:
			WASP A 10 A_Look;
			Loop;
		
		See:
			WASP ABCDABCD 2 A_Chase;
			Loop;
		
		Missile:
			WASP A 1 A_SpectraWaspAttackChoose;
		Missile.Puddle:
			WASP G 5 A_FaceTarget;
			WASP H 3 Bright A_SpawnProjectile("SHDX_SpectraWaspBall", 8, flags:CMF_ABSOLUTEPITCH, pitch:-8);
			WASP I 3 Bright;
			Goto See;
			
		Missile.Laser:
			WASP G 5 A_FaceTarget;
			WASP H 5 A_SpawnProjectile("SHDX_SpecraWaspLaser", 8);
			WASP I 5 A_FaceTarget;
			WASP H 5 A_SpawnProjectile("SHDX_SpecraWaspLaser", 8);
			WASP I 5 A_FaceTarget;
			WASP H 5 A_SpawnProjectile("SHDX_SpecraWaspLaser", 8);
			WASP I 5;
			Goto See;
		
		Death:
		Death.Ice:
			WASP K 0
			{
				A_StopSound();
				A_StopSound(CHAN_BODY);
			}
			WASP K 5
			{
				A_NewScream();
			}
			WASP L 5
			{
				if (CheckIfOrionWasp())
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_BOSS_CHANCE, "scootaloo/sorryorion", OLSSF_FORCEONELINER|OLSSF_BYPASSMUTE|OLSSF_BYPASSPLAYERPREFIX|OLSSF_NOGRIN);
				else
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE);
			}
			WASP MN 5;
			WASP O 0
			{
				A_SpawnSpectrumPuddle();
				A_SetCorpseShootable();
			}
			WASP O -1;
			Stop;
		
		XDeath:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		Death.Spectrum:
			EXPL A 0
			{
				A_NoBlocking();
				A_StartSound("minisentry/explode", CHAN_7);
				A_SpawnMetalJunk2Fx(self);
				
				if (!iscorpse)
					A_SpawnSpectrumPuddle();
				
				if (CheckIfOrionWasp())
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_BOSS_CHANCE, "scootaloo/sorryorion", OLSSF_FORCEONELINER|OLSSF_BYPASSMUTE|OLSSF_BYPASSPLAYERPREFIX|OLSSF_NOGRIN);
				else
					A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_GIB_CHANCE, oltype:OLTYPE_EXPLOSIVE);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}