/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_MiniSentryHailBall : SHDX_HailBall
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 3;
		DamageType "Ice";
		// SeeSound "weapons/hailf";
		DeathSound "weapons/hailx";
	}
	
	States
	{
		Spawn:
			HAIL A 1;
			Loop;
		Death:
			HAIL B 1 A_FadeTo(0.00, 0.1, FTF_REMOVE);
			Loop;
	}
}

Class SHDX_MiniSentry : SHDX_Enemy
{
	Default
	{
		ActiveSound "minisentry/active";
		Health 15;
		Radius 12;
		Height 32;
		Mass 100;
		PainChance 200;
		Obituary "$SHDX_OB_MINISENTRY";
		Tag "$SHDX_TAG_MINISENTRY";
		Species "Sentry";
		
		+NoInfighting
		+NoBlood
		+NoIceDeath
		
		-SHDX_Enemy.CanJump
		-SHDX_Enemy.CanSwim
	}
	
	int delaytildeath;
	
	const MASTERLEFTDELAYTICS = TICRATE * 3;
	
	void CheckFloorForLava()
	{
		TextureID flat = CurSector.GetTexture(Sector.Floor);
		String fs = TexMan.GetName(flat);
		if (fs == "F_LAVA" && CheckSolidFooting() && health > 0)
		{
			// The Floor Is Marxism- er, Lava
			A_Die();
		}
	}
	
	void CheckIfMasterExists()
	{
		if (master && master.health > 0)
		{
			return;
		}
		
		delaytildeath++;
		
		if (delaytildeath >= MASTERLEFTDELAYTICS && health > 0)
		{
			A_Die();
		}
	}
	
	void CheckIfUnderWater()
	{
		if (waterlevel >= 2)
		{
			A_Die();
		}
	}
	
	override void Tick()
	{
		Super.Tick();
		CheckFloorForLava();
		CheckIfMasterExists();
		CheckIfUnderWater();
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (source && source == master || source && source.GetSpecies() == 'Pony')
			damage = 0;
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	void A_MiniSentryFire()
	{
		A_StartSound("weapons/hailf", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_MiniSentryHailBall", 12, -4);
		A_SpawnProjectile("SHDX_MiniSentryHailBall", 12, 4);
	}
	
	States
	{	
		Spawn:
			MSNT A 10 A_Look;
			loop;
		See:
			MSNT AA 4 A_Chase(null, "Missile", CHF_DONTMOVE);
			MSNT A 0
			{
				if (Random[Sentry](0, 3) == 1)
					A_StartSound("minisentry/scan", CHAN_BODY);
			}
			Loop;
		Missile:
			MSNT A 5
			{
				A_FaceTarget();
				A_StartSound("minisentry/spot", CHAN_BODY);
			}
			MSNT B 3 Bright A_MiniSentryFire;
			MSNT C 3;
			MSNT A 4 A_MonsterRefire(32, "See");
			Goto Missile+1;
		Death:
		XDeath:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		Death.Spectrum:
			EXPL A 0
			{
				A_SetScale(0.08, 0.08);
				A_StartSound("minisentry/explode", CHAN_7);
				A_StartSound("misc/metalgibs", CHAN_6);
				A_SpawnMetalJunk2Fx(self);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}

Class SHDX_SpectraSentry : SHDX_MiniSentry
{
	Default
	{
		//$Title "SpectraSentry"
		//$Sprite SSENA2A8
		
		ActiveSound "minisentry/active";
		Health 60;
		Radius 14;
		Height 44;
		Mass 100;
		Scale 0.14;
		Obituary "$SHDX_OB_SENTRY";
		Tag "$SHDX_TAG_SENTRY";
		
		+DONTTHRUST
	}
	
	void A_SentryFire()
	{
		A_StartSound("weapons/hailf", CHAN_WEAPON);
		
		A_SpawnProjectile("SHDX_MiniSentryHailBall", 36, -4);
		A_SpawnProjectile("SHDX_MiniSentryHailBall", 36, 4);
	}
	
	override void Tick()
	{
		SHDX_Enemy.Tick();
		CheckFloorForLava();
	}
	
	States
	{	
		Spawn:
			SSEN A 10 A_Look;
			loop;
		See:
			SSEN AA 4 A_Chase(null, "Missile", CHF_DONTMOVE);
			SSEN A 0
			{
				if (Random[Sentry](0, 6) == 1)
				{
					A_StartSound("minisentry/scan", CHAN_BODY);
				}
			}
			Loop;
		Missile:
			SSEN A 5
			{
				A_FaceTarget();
				A_StartSound("minisentry/spot", CHAN_BODY);
			}
			SSEN B 3 Bright A_SentryFire;
			SSEN C 3;
			SSEN A 4 A_MonsterRefire(32, "See");
			Goto Missile+1;
		Death:
		XDeath:
		Death.Explosive:
		Death.Weather:
		Death.Extreme:
		Death.Spectrum:
			EXPL A 0
			{
				A_StartSound("minisentry/explode", CHAN_7);
				A_StartSound("misc/metalgibs", CHAN_6);
				A_SpawnMetalJunk2Fx(self);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}