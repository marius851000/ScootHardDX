/*
Copyright 2020-2021 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_BossSpot2 : SpecialSpot
{
	Default
	{
		//$Category "Monsters"
		//$Sprite internal:action
		//$Title "Boss Teleport Spot 2"
		
		+Invisible
	}
}

Class SHDX_BossSpotMaimbowStage2 : SHDX_Actor
{
	Default
	{
		//$Category "Monsters"
		//$Sprite internal:action
		//$Title "Maimbow Stage 2 Spot"
		
		+Invisible
		+NOBLOCKMAP
	}
}

Class SHDX_BossSpotScootalooStage2 : SHDX_Actor
{
	Default
	{
		//$Category "Monsters"
		//$Sprite internal:action
		//$Title "Scootaloo Stage 2 Spot"
		
		+Invisible
		+NOBLOCKMAP
	}
}

Class SHDX_BossSpotMaimbowStage3 : SHDX_Actor
{
	Default
	{
		//$Category "Monsters"
		//$Sprite internal:action
		//$Title "Maimbow Stage 3 Spot"
		
		+Invisible
		+NOBLOCKMAP
	}
}

Class SHDX_BossSpotScootalooStage3 : SHDX_Actor
{
	Default
	{
		//$Category "Monsters"
		//$Sprite internal:action
		//$Title "Scootaloo Stage 3 Spot"
		
		+Invisible
		+NOBLOCKMAP
	}
}

extend class SHDX_MaimbowUndashBoss
{
	void MaimbowArenaCheck()
	{
		if (maimbowstage == MAIMBOW_STAGE_1 && health <= (SpawnHealth() * 0.667))
			SetMaimbowStage2();

		if (maimbowstage == MAIMBOW_STAGE_2 && health <= (SpawnHealth() * 0.333))
			SetMaimbowStage3();
	}
	
	void SetMaimbowStage2()
	{
		SetStateLabel("MaimbowTeleport1");
		A_Stage2Teleportation();
		maimbowstage = MAIMBOW_STAGE_2;
	}
	
	void SetMaimbowStage3()
	{
		SetStateLabel("MaimbowTeleport2");
		A_Stage3Teleportation();
		maimbowstage = MAIMBOW_STAGE_3;
	}	
	
	void A_Stage2Teleportation()
	{
		let hnd = SHDX_MaimbowHandler(EventHandler.Find("SHDX_MaimbowHandler"));
		
		if (hnd)
		{
			hnd.SetTickerForWasps();
			
			if (hnd.stage2maimbowspot)
				TeleportMaimbow(hnd.stage2maimbowspot.pos, hnd.stage2maimbowspot.angle);
			
			if (hnd.stage2scootaloospot)
				TeleportPlayers(hnd.stage2scootaloospot.pos, hnd.stage2scootaloospot.angle);
		}
	}
	
	void A_Stage3Teleportation()
	{
		let hnd = SHDX_MaimbowHandler(EventHandler.Find("SHDX_MaimbowHandler"));
		if (hnd)
		{
			if (hnd.stage3maimbowspot)
				TeleportMaimbow(hnd.stage3maimbowspot.pos, hnd.stage3maimbowspot.angle);
			
			if (hnd.stage3scootaloospot)
				TeleportPlayers(hnd.stage3scootaloospot.pos, hnd.stage3scootaloospot.angle);
		}
	}
	
	void TeleportMaimbow(Vector3 p, double ang)
	{
		self.Teleport(p, ang, 0);
	}
	
	const TELEPORT_OFFSET = 48;
	
	void TeleportPlayers(Vector3 p, double ang)
	{
		double ang2 = ang;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo pl = players[i];
			if (pl && pl.mo && pl.mo.player)
			{
				Vector3 pos2 = p;
				if (i > 0)
				{
					ang2 += 22.5;
					pos2.x = TELEPORT_OFFSET * cos(ang2);
					pos2.y = TELEPORT_OFFSET * sin(ang2);
				}
				
				players[i].mo.A_Stop();
				players[i].mo.SetStateLabel("Spawn");
				players[i].mo.vel.x = 0;
				players[i].mo.vel.y = 0;
				players[i].mo.vel.z = 0;
				
				pl.cheats |= CF_TOTALLYFROZEN;
				
				players[i].mo.A_SetBlend("FFFFFF", 1.0, 70);
				players[i].mo.Teleport(pos2, ang2, 0);
				players[i].mo.A_SetPitch(0);
			}
		}
	}
	
	void A_UnfreezePlayers()
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			PlayerInfo pl = players[i];
			
			if (pl && pl.mo)
				pl.cheats &= ~CF_TOTALLYFROZEN;
		}
	}
	
	const MAIMBOW_TELEPORT_COUNTER_MAX = 6;
	
	void A_MaimbowWarpAboutSecondArena()
	{
		if (maimbowstage == MAIMBOW_STAGE_2)
		{
			teleportcounter++;
			
			if (teleportcounter >= MAIMBOW_TELEPORT_COUNTER_MAX)
				teleportcounter = MAIMBOW_TELEPORT_COUNTER_MAX;
			
			if (Random[MaimbowTeleport](0, 255) < 56 && teleportcounter >= MAIMBOW_TELEPORT_COUNTER_MAX)
			{
				teleportcounter = 0;
				A_Teleport("See2", "SHDX_BossSpot", "SHDX_TeleportFog", 0);
			}
		}
	}
}