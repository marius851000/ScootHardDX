/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

Class SHDX_PegapolBullet : FastProjectile
{
	Default
	{
		Speed 55;
		Radius 8;
		Height 8;
		DamageFunction Random[Pegapol](4,8);
		DamageType "Bullet";
		Scale 0.12;
		MissileType "SHDX_BulletTrail";
		MissileHeight 8;
		RenderStyle "Translucent";
		Alpha 0.667;
		
		+CANNOTPUSH
		+NODAMAGETHRUST
		+SPAWNSOUNDSOURCE
		//+ALLOWTHRUFLAGS
		//+THRUSPECIES
		//+MTHRUSPECIES
		+BloodSplatter
	}
	States
	{
		Spawn:
			BULL A 4 Bright;
			Loop;
		Death:
			PUFF ABCD 4 Bright;
			Stop;
	}
}

Class SHDX_Pegapol : SHDX_Enemy
{
	Default
	{
		//$Category "Monsters"
		//$Sprite PEGAA1
		//$Title "Pegapol (Male)"
		Health 100;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 128;
		MeleeRange 8;
		Damage 5;
		DamageFactor "Bullet", 0.95;
		DamageFactor "Explosive", 0.667;
		DamageFactor "Lightning", 0.667;
		DamageFactor "Ice", 0.50;
		DamageFactor "Spectrum", 0.335;
		SeeSound "pegapol/sight";
		PainSound "pegapol/pain";
		DeathSound "pegapol/death";
		ActiveSound "pegapol/active";
		Obituary "$SHDX_OB_PEGAPOL";
		Tag "$SHDX_TAG_PEGAPOL";
		Species "Pony";
	}
	
	int flyingmode;
	
	override void Tick()
	{
		Super.Tick();
		if (flyingmode > 0)
			isflying = true;
		else
			isflying = false;
	}
	
	void A_DropItemsPegapol()
	{
		if (target && target.CountInv("SHDX_BitCoin") < 50)
		{
			A_SHDX_DropItem("SHDX_SilverBitCoin", false);
		}
		
		if (target && target.CountInv("SHDX_SubmachineGun") <= 0)
			A_SHDX_DropItem("SHDX_SubmachineGun");
	}
	
	void A_PegapolFire()
	{
		A_StartSound("pegapol/attack", CHAN_WEAPON);
		A_SpawnProjectile("SHDX_PegapolBullet", 16);
	}
	
	void A_FlapWings()
	{
		A_StartSound("pegapol/wings", CHAN_6);
	}
	
	States
	{
		Spawn:
			PEGA A 10 A_Look;
			Loop;
		See:
			PEGA B 0
			{
				if (flyingmode >= 1)
					return ResolveState("See.Flying");
				
				return ResolveState(null);
			}
			PEGA BCDEBCDE 4 A_Chase;
			PEGA E 0
			{
				if (random[Pegapol](0, 100) >= 72)
					return ResolveState("StartFlying");
				
				return ResolveState(null);
			}
			Loop;
		See.Flying:
			PEGA O 4
			{
				A_Chase();
				A_FlapWings();
			}
			PEGA PQR 4
			{
				A_Chase();
			}
			PEGA O 4
			{
				A_Chase();
				A_FlapWings();
			}
			PEGA PQR 4
			{
				A_Chase();
			}
			PEGA R 0
			{
				flyingmode++;
				if (flyingmode >= 15)
					return ResolveState("StopFlying");
					
				return ResolveState(null);
			}
			Loop;
		StartFlying:
			PEGA O 0
			{
				A_StopSound(CHAN_BODY);
				bNoGravity = true;
				bFloat = true;
				flyingmode = 1;
			}
			Goto See.Flying;
		Missile:
			PEGA F 0 A_StopSound(CHAN_BODY);
			PEGA F 0
			{
				if (flyingmode >= 1)
					return ResolveState("Missile.Flying");
				
				return ResolveState(null);
			}
			PEGA F 0 A_StartSound("pegapol/fireready", CHAN_WEAPON);
			PEGA F 12 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			Goto See;
		Missile.Flying:
			PEGA O 0
			{
				A_FaceTarget();
				A_StartSound("pegapol/charge", CHAN_7);
				A_FlapWings();
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			Goto Missile.StopFlying;
		Missile.StopFlying:
			PEGA R 0
			{
				bNoGravity = false;
				bFloat = false;
				flyingmode = 0;
			}
			Goto Missile+1;
		Pain:
			PEGA J 0
			{
				if (flyingmode >= 1)
				{
					if (Random[Pegapol](0, 1))
						return ResolveState("Pain.Flying1");
					
					return ResolveState("Pain.Flying2");
				}
				
				if (Random[Pegapol](0, 1))
					return ResolveState("Pain1");
				
				return ResolveState("Pain2");
			}
		Pain1:
			PEGA S 0
			{
				Actor mo = Spawn("SHDX_PegaPolTrail1", pos, ALLOW_REPLACE);
				
				if (mo)
				{
					mo.angle = angle;
				}
			}
			PEGA S 3
			{
				VelFromAngle(speed, angle+90);
			}
			PEGA S 3 A_Pain;
			Goto Missile;
		Pain2:
			PEGA T 0
			{
				Actor mo = Spawn("SHDX_PegaPolTrail2", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
			}
			PEGA T 3
			{
				VelFromAngle(speed, angle-90);
			}
			PEGA T 3 A_Pain;
			Goto Missile;
		Pain.Flying1:
			PEGA S 0
			{
				Actor mo = Spawn("SHDX_PegaPolTrail1", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
			}
			PEGA S 3 A_Pain;
			Goto StopFlying;
		Pain.Flying2:
			PEGA T 0
			{
				Actor mo = Spawn("SHDX_PegaPolTrail2", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
			}
			PEGA T 3 A_Pain;
			Goto StopFlying;
		StopFlying:
			PEGA S 0
			{
				flyingmode = 0;
				bNoGravity = false;
				bFloat = false;
			}
			Goto See;
		Death:
			PEGA K 5 A_Scream;
			PEGA L 5
			{
				A_NoBlocking();
				A_DropItemsPegapol();
				A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE);
			}
			PEGA M 5;
			PEGA N -1 A_SetCorpseShootable;
			Stop;
		Death.Lightning:
			PEGA K 5 A_Scream;
			PEGA L 5
			{
				A_NoBlocking();
				A_DropItemsPegapol();
				A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE, oltype:OLTYPE_LIGHTNING);
			}
			PEGA M 5;
			PEGA N -1 A_SetCorpseShootable;
			Stop;
		Ice:
			PEGA S 0 A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE, oltype:OLTYPE_FROZEN);
			PEGA S 315 A_SHDX_FreezeDeath;
			PEGA S 105 A_SHDX_IceShards;
			Wait;
		Death.Explosive:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegapol();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Explosive;
		Death.Weather:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegapol();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Weather;
		Death.Extreme:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegapol();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Extreme;
		Crush:
			GIBX D 0 A_SHDX_SquishSound;
			GIBX D 1;
			GIBX D -1;
			Stop;
	}
}

class SHDX_PegaPolTrail1 : SHDX_Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		
		RenderStyle "Translucent";
		
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			PEGA S 8;
			PEGA S 8 A_SetTranslucent(0.4);
			Stop;
	}
}

class SHDX_PegaPolTrail2 : SHDX_PegaPolTrail1
{	
	States
	{
		Spawn:
			PEGA T 8;
			PEGA T 8 A_SetTranslucent(0.4);
			Stop;
	}
}

Class SHDX_PegaWizExplosiveLine : SHDX_Projectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 45;
		Damage 6;
		Projectile;
		+RANDOMIZE
		DamageType "Explosive";
		// SeeSound "weapons/rocketf";
		DeathSound "weapons/rocketx";
	}
	
	States
	{
		Spawn:
			MISL A 5 Bright NoDelay A_SpawnProjectile("SHDX_PegaWizExplosiveLine2", 0, 0, 0, SHDX_RBOWER_FLAGS, 0);
			Loop;
		
		Death:
			EXPL A 0 Bright
			{
				A_Explode(12, 112, flags:0, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 16, 32, 80, DamageType:'Explosive');
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}


Class SHDX_PegaWizExplosiveLine2 : SHDX_Projectile
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 0;
		Damage 4;
		Projectile;
		+Corpse
		+FloorHugger
		DamageType "Explosive";
		DeathSound "weapons/rocketx";
	}
	
	States
	{
		Spawn:
		Death:
		XDeath:
		Crash:
			EXPL A 0 NoDelay Bright
			{
				A_StartSound("weapons/rocketx", CHAN_BODY);
				A_Explode(10, 112, flags:0, damagetype:'Explosive');
				// SHDX_Utilities.DoExplosion(self, 18, 32, 72, DamageType:'Explosive', IgnoreMe:target);
			}
			EXPL A 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL BCDEFGHI 3 Bright;
			Stop;
	}
}

Class SHDX_TornadozerProjectilePegaWiz : SHDX_Projectile
{
	Default
	{
		Radius 5;
		Height 12;
		Scale 0.06;
		Speed 25;
		DamageType "Weather";
		Damage 9;
		Projectile;
		+MISSILE
	}
	
	States
	{
		Spawn:
			TORN A 0 NoDelay A_StartSound("weapons/tornadof", CHAN_BODY);
		Spawn1:
			TORN ABCD 1;
			Loop;
		Death:
			EXPL A 0 Bright
			{
				A_Explode(32, 40, damagetype:'Weather');
				// SHDX_Utilities.DoExplosion(self, 32, 32, 64, DamageType:'Weather');
			}
		Death1:
			TORN A 3
			{
				A_FadeTo(0.0, 0.1, true);
			}
			TORN BCD 3;
			Loop;
	}
}

Class SHDX_PegaWiz : SHDX_Pegapol
{
	Default
	{
		//$Category "Monsters"
		//$Sprite PEGAF1
		//$Title "Pegawiz"
		Health 350;
		Radius 20;
		Height 56;
		Mass 100;
		Speed 8;
		PainChance 144;
		MeleeRange 8;
		Damage 8;
		DamageFactor "Bullet", 0.5;
		DamageFactor "Explosive", 0.5;
		DamageFactor "Lightning", 0.5;
		DamageFactor "Ice", 0.5;
		DamageFactor "Spectrum", 0.5;
		DamageFactor "Weather", 0.5;
		
		Translation "2:15=10:15", "176:191=176:179", "208:216=176:178", "32:37=16:21";
		
		SeeSound "pegawiz/sight";
		PainSound "pegawiz/pain";
		DeathSound "pegawiz/death";
		ActiveSound "pegawiz/active";
		Obituary "$SHDX_OB_PEGAWIZ";
		Tag "$SHDX_TAG_PEGAWIZ";
		Species "Pony";
		
		+NOICEDEATH
	}
	
	int attacktype;
	
	const PEGAWIZ_ATTACK_MELEE = 0;
	const PEGAWIZ_ATTACK_EXPLOSIVE = 1;
	const PEGAWIZ_ATTACK_LIGHTNING = 2;
	const PEGAWIZ_ATTACK_ICE = 3;
	const PEGAWIZ_ATTACK_RAINBOWER = 5;
	const PEGAWIZ_ATTACK_TORNADOZER = 6;
	const PEGAWIZ_ATTACK_BULLET = 7;
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (mod  == 'Explosive')
			attacktype = PEGAWIZ_ATTACK_EXPLOSIVE;
		else if (mod == 'Lightning')
			attacktype = PEGAWIZ_ATTACK_LIGHTNING;
		else if (mod == 'Ice')
			attacktype = PEGAWIZ_ATTACK_ICE;
		else if (mod == 'Spectrum')
			attacktype = PEGAWIZ_ATTACK_RAINBOWER;
		else if (mod == 'Weather')
			attacktype = PEGAWIZ_ATTACK_TORNADOZER;
		else if (mod == 'Bullet')
			attacktype = PEGAWIZ_ATTACK_BULLET;
		else
			attacktype = PEGAWIZ_ATTACK_MELEE;
			
		A_Pain();
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	void A_DropItemsPegaWiz()
	{
		if (target && target.CountInv("SHDX_BitCoin") < 50)
			A_SHDX_DropItem("SHDX_GoldBitCoin", false);
		
		if (target && target.CountInv("SHDX_SubmachineGun") <= 0)
			A_SHDX_DropItem("SHDX_SubmachineGun");
	}
	
	void A_PegaWizResetAttackType()
	{
		attacktype = PEGAWIZ_ATTACK_MELEE;
	}
	
	void A_PegaWizHailerShot()
	{
		A_StartSound("weapons/hailf2", CHAN_WEAPON);
		for (int i = -32; i < 32; i += 16)
		{
			A_SpawnProjectile("SHDX_AtmosphereHailBall", angle:i);
		}
	}
	
	void A_PegaWizLightningShot()
	{
		for (int i = -32; i < 32; i += 16)
		{
			A_SpawnProjectile("SHDX_PlasmaBall", angle:i);
		}
	}
	
	void A_TornadozerShot()
	{
		for (int i = -32; i < 32; i += 16)
		{
			A_SpawnProjectile("SHDX_TornadozerProjectilePegaWiz", angle:i);
		}
	}
	
	States
	{
		Spawn:
			PEGA A 10 A_Look;
			Loop;
		See:
			PEGA B 0
			{
				if (flyingmode >= 1)
					return ResolveState("See.Flying");
				
				return ResolveState(null);
			}
			PEGA BCDEBCDE 4 A_Chase;
			PEGA E 0
			{
				if (random[Pegapol](0, 100) >= 72)
				{
					return ResolveState("StartFlying");
				}
				
				return ResolveState(null);
			}
			Loop;
		See.Flying:
			PEGA O 4
			{
				A_Chase();
				A_FlapWings();
			}
			PEGA PQR 4
			{
				A_Chase();
			}
			PEGA O 4
			{
				A_Chase();
				A_FlapWings();
			}
			PEGA PQR 4
			{
				A_Chase();
			}
			PEGA R 0
			{
				flyingmode++;
				if (flyingmode >= 15)
					return ResolveState("StopFlying");
					
				return ResolveState(null);
			}
			Loop;
		StartFlying:
			PEGA O 0
			{
				A_StopSound(CHAN_BODY);
				bNoGravity = true;
				bFloat = true;
				flyingmode = 1;
			}
			Goto See.Flying;
		Missile:
			PEGA F 0
			{
				switch (attacktype)
				{
					case PEGAWIZ_ATTACK_EXPLOSIVE:
						return ResolveState("Missile.Explosive");
						break;
					case PEGAWIZ_ATTACK_LIGHTNING:
						return ResolveState("Missile.Lightning");
						break;
					case PEGAWIZ_ATTACK_ICE:
						return ResolveState("Missile.Ice");
						break;
					case PEGAWIZ_ATTACK_RAINBOWER:
						return ResolveState("Missile.Rainbower");
						break;
					case PEGAWIZ_ATTACK_TORNADOZER:
						return ResolveState("Missile.Tornadozer");
						break;
					case PEGAWIZ_ATTACK_BULLET:
						return ResolveState("Missile.Bullet");
						break;
					default:
					case PEGAWIZ_ATTACK_MELEE:
						return ResolveState("Missile.MeleeFlying");
						break;
				}
				
				return ResolveState("Missile.MeleeFlying");
			}
		Missile.Bullet:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fireready", CHAN_WEAPON);
			}
			PEGA F 12 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			PEGA G 2 Bright A_PegapolFire;
			PEGA H 2 Bright A_PegapolFire;
			PEGA IF 2 A_FaceTarget;
			PEGA F 0 A_PegaWizResetAttackType;
			Goto See;
		Missile.Explosive:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fire", CHAN_VOICE);
			}
			PEGA F 15 A_FaceTarget;
			PEGA G 2 Bright A_SpawnProjectile("SHDX_PegaWizExplosiveLine");
			PEGA H 2 Bright;
			PEGA I 2 A_PegaWizResetAttackType;
			Goto See;
		Missile.Ice:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fire", CHAN_VOICE);
			}
			PEGA F 15 A_FaceTarget;
			PEGA G 2 Bright A_PegaWizHailerShot;
			PEGA H 2 Bright A_PegaWizHailerShot;
			PEGA IF 2 A_FaceTarget;
			PEGA G 2 Bright A_PegaWizHailerShot;
			PEGA H 2 Bright A_PegaWizHailerShot;
			PEGA IF 2 A_FaceTarget;
			PEGA F 0 A_PegaWizResetAttackType;
			Goto See;
		Missile.Lightning:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fire", CHAN_VOICE);
			}
			PEGA F 15 A_FaceTarget;
			PEGA G 2 Bright A_PegaWizLightningShot;
			PEGA H 2 Bright;
			PEGA G 2 Bright A_PegaWizLightningShot;
			PEGA H 2 Bright;
			PEGA G 2 Bright A_PegaWizLightningShot;
			PEGA H 2 Bright;
			PEGA G 2 Bright A_PegaWizLightningShot;
			PEGA H 2 Bright;
			PEGA G 2 Bright A_PegaWizLightningShot;
			PEGA H 2 Bright;
			PEGA IF 2 A_FaceTarget;
			PEGA F 0 A_PegaWizResetAttackType;
			Goto See;
		Missile.Rainbower:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fire", CHAN_VOICE);
			}
			PEGA F 15 A_FaceTarget;
			PEGA G 2 Bright A_SpawnProjectile("SHDX_RainbowerProjectileA");
			PEGA HI 2 Bright;
			PEGA F 2 A_PegaWizResetAttackType;
			Goto See;
		Missile.Tornadozer:
			PEGA F 0
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("pegawiz/fire", CHAN_VOICE);
			}
			PEGA F 15 A_FaceTarget;
			PEGA G 2 Bright A_TornadozerShot;
			PEGA H 2 Bright;
			PEGA I 2 A_PegaWizResetAttackType;
			Goto See;
		Missile.MeleeFlying:
			PEGA O 0
			{
				A_StopSound(CHAN_BODY);
				bNoGravity = true;
				bFloat = true;
				flyingmode = 1;
			}
			Goto Missile.Flying;
		Missile.Flying:
			PEGA O 0
			{
				A_FaceTarget();
				A_StartSound("pegawiz/charge", CHAN_7);
				A_FlapWings();
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			PEGA OPQR 5
			{
				A_SkullAttack(15);
			}
			Goto Missile.StopFlying;
		Missile.StopFlying:
			PEGA R 0
			{
				bNoGravity = false;
				bFloat = false;
				flyingmode = 0;
			}
			Goto Missile;
		Pain:
			PEGA J 0
			{
				if (flyingmode >= 1)
				{
					if (Random[Pegapol](0, 1))
						return ResolveState("Pain.Flying1");
					
					return ResolveState("Pain.Flying2");
				}
				
				if (Random[Pegapol](0, 1))
					return ResolveState("Pain1");
				
				return ResolveState("Pain2");
			}
		Pain1:
			PEGA S 0
			{
				Actor mo = Spawn("SHDX_PegaWizTrail1", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
				
				A_StartSound("pegawiz/dodge", CHAN_VOICE);
			}
			PEGA S 3
			{
				VelFromAngle(speed, angle+90);
			}
			PEGA S 3;
			Goto Missile;
		Pain2:
			PEGA T 0
			{
				Actor mo = Spawn("SHDX_PegaWizTrail2", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
				
				A_StartSound("pegawiz/dodge", CHAN_VOICE);
			}
			PEGA T 3
			{
				VelFromAngle(speed, angle-90);
			}
			PEGA T 3;
			Goto Missile;
		Pain.Flying1:
			PEGA S 0
			{
				Actor mo = Spawn("SHDX_PegaWizTrail1", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
				
				A_StartSound("pegawiz/dodge", CHAN_VOICE);
			}
			PEGA S 3;
			Goto StopFlying;
		Pain.Flying2:
			PEGA T 0
			{
				Actor mo = Spawn("SHDX_PegaWizTrail2", pos, ALLOW_REPLACE);
				
				if (mo)
					mo.angle = angle;
				
				A_StartSound("pegawiz/dodge", CHAN_VOICE);
			}
			PEGA T 3;
			Goto StopFlying;
		StopFlying:
			PEGA S 0
			{
				flyingmode = 0;
				bNoGravity = false;
				bFloat = false;
			}
			Goto See;
			
		Death:
		Death.Ice:
			PEGA K 5 A_Scream;
			PEGA L 5
			{
				A_NoBlocking();
				A_DropItemsPegaWiz();
				A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE);
			}
			PEGA M 5;
			PEGA N -1 A_SetCorpseShootable;
			Stop;
		Death.Lightning:
			PEGA K 5 A_Scream;
			PEGA L 5
			{
				A_NoBlocking();
				A_DropItemsPegaWiz();
				A_SHDX_GivePlayerOneLiner(SHDX_ONELINER_NORMAL_CHANCE, oltype:OLTYPE_LIGHTNING);
			}
			PEGA M 5;
			PEGA N -1 A_SetCorpseShootable;
			Stop;
		Death.Explosive:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegaWiz();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Explosive;
		Death.Weather:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegaWiz();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Weather;
		Death.Extreme:
			GIBX A 3
			{
				A_SHDX_ExtremeScreamAndUnblock();
				A_DropItemsPegaWiz();
				A_SpawnGibsFx(self);
			}
			Goto Super::Death.Extreme;
	}
}

class SHDX_PegaWizTrail1 : SHDX_Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		
		RenderStyle "Translucent";
		
		Translation "2:15=10:15", "176:191=176:179", "208:216=176:178", "32:37=16:21";
		
		Alpha 0.6;
	}
	
	States
	{
		Spawn:
			PEGA S 8;
			PEGA S 8 A_SetTranslucent(0.4);
			Stop;
	}
}

class SHDX_PegaWizTrail2 : SHDX_PegaWizTrail1
{	
	States
	{
		Spawn:
			PEGA T 8;
			PEGA T 8 A_SetTranslucent(0.4);
			Stop;
	}
}