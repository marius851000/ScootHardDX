/*
Copyright 2020 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// Vending machine
class SHDX_VendingMachine : SHDX_Actor
{
	Default
	{
		//$Category "Controllers"
		//$Title "Vending Machine"
		//$Sprite internal:action
	}
	
	int nomoneycount;
	bool nomoneytriggered;
	int nomoneycooldown;
	
	const VEND_APPLE_COST = 1;
	const VEND_MEAL_COST = 5;
	const VEND_EASY_MULTI = 1;
	const VEND_MEDIUM_MULTI = 3;
	const VEND_HARD_MULTI = 5;
	
	// Get amount of times vending machine has been used in a level
	int GetVendingMachineCount()
	{
		let hnd = SHDX_Handler(EventHandler.Find("SHDX_Handler"));
		if (!hnd) return 0;
		
		return hnd.vendingmachineusecount;
	}
	
	// Increment the vending machine
	void IncrementVendingMachineEasterEgg()
	{
		let hnd = SHDX_Handler(EventHandler.Find("SHDX_Handler"));
		if (!hnd) return;
		
		hnd.vendingmachineusecount++;
		
		if (hnd.vendingmachineusecount >= 7)
		{
			hnd.vendingmachineusecount = 7;
			hnd.vendingeastereggcompleted = true;
		}
	}
	
	// Check Vending Machine if it's been completed
	bool CheckVendingMachineEasterEgg()
	{
		let hnd = SHDX_Handler(EventHandler.Find("SHDX_Handler"));
		if (!hnd) return false;
		
		return hnd.vendingeastereggcompleted;
	}
	
	// Process cooldown
	override void Tick()
	{
		Super.Tick();
		
		if (nomoneycooldown > 0)
			nomoneycooldown--;
	}
	
	// use vending machine
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			// calculate health difference
			int healthdiff = shdxpl.MaxHealth - shdxpl.health;
			// if health difference is greater
			if (healthdiff > 0)
			{
				int bitcount = shdxpl.CountInv("SHDX_BitCoin");
				
				int multiplier;
				
				// Get skill
				int skill = G_SkillPropertyInt(SKILLP_ACSReturn);
				
				// calculate multiplier
				if (skill == 0)
					multiplier = VEND_EASY_MULTI;
				if (skill == 1)
					multiplier = VEND_MEDIUM_MULTI;
				if (skill >= 2)
					multiplier = VEND_HARD_MULTI;
				
				// Console.PrintF("skill: "..skill);
				// Console.PrintF("multiplier: "..skill);
				
				// get vending machine item costs
				int applecost = int(VEND_APPLE_COST * multiplier);
				int mealcost = int(VEND_MEAL_COST * multiplier);
				
				// Console.PrintF("applecost: "..applecost);
				// Console.PrintF("mealcost: "..mealcost);
				
				if (bitcount >= (applecost))
				{
					// Buy some apples!
					if (bitcount >= applecost && bitcount < mealcost)
					{
						shdxpl.A_GiveInventory("Health", 10);
						shdxpl.A_TakeInventory("SHDX_BitCoin", applecost);
						A_StartSound("vending/dispense", CHAN_VENDINGUSE);
						shdxpl.A_Log(StringTable.Localize("$SHDX_VENDING_APPLE"));
					}
					else if (bitcount >= mealcost)
					{
						shdxpl.A_GiveInventory("Health", 25);
						shdxpl.A_TakeInventory("SHDX_BitCoin", mealcost);
						A_StartSound("vending/dispense", CHAN_VENDINGUSE);
						shdxpl.A_Log(StringTable.Localize("$SHDX_VENDING_HOTMEAL"));
					}
				}
				else
				{
					// No money
					if (nomoneycooldown <= 0)
						nomoneycount++;
					
					// Easter egg routines
					if (!CheckVendingMachineEasterEgg() && nomoneycount > 5 && nomoneycooldown <= 0)
					{
						IncrementVendingMachineEasterEgg();
						
						int sndnum = GetVendingMachineCount();
						
						String snd = "maimbow/vending"..sndnum;
						
						A_StartSound(snd, CHAN_VENDINGUSE, CHANF_OVERLAP, attenuation:0.5);
						
						// Maimbow is fed up, give player a ration
						if (sndnum == 7)
						{
							shdxpl.A_GiveInventory("Health", 25);
							A_StartSound("vending/dispense", CHAN_VENDINGUSE, CHAN_OVERLAP);
							shdxpl.A_Log(StringTable.Localize("$SHDX_VENDING_HOTMEAL"));
							nomoneycount = 0;
							return false;
						}
						else
						{
							A_StartSound("vending/fail", CHAN_VENDINGUSE, CHANF_OVERLAP);
						}
						
						nomoneycount = 0;
						
						if (sndnum == 1)
							nomoneycooldown = (TICRATE * 5);
						if (sndnum == 2)
							nomoneycooldown = (TICRATE * 4);
						if (sndnum == 3)
							nomoneycooldown = (TICRATE * 7);
						if (sndnum == 4)
							nomoneycooldown = (TICRATE * 13);
						if (sndnum == 5)
							nomoneycooldown = (TICRATE * 5);
						if (sndnum == 6)
							nomoneycooldown = (TICRATE * 6);
						if (sndnum == 7)
							nomoneycooldown = (TICRATE * 6);
					}
					else
					{
						A_StartSound("vending/fail", CHAN_VENDINGUSE, CHANF_OVERLAP);
					}
					
					shdxpl.A_Log(StringTable.Localize("$SHDX_VENDING_NOTENOUGHBITS"));
				}
			}
			else
			{
				A_StartSound("vending/fail", CHAN_VENDINGUSE, CHANF_OVERLAP);
				shdxpl.A_Log(StringTable.Localize("$SHDX_VENDING_NOTHUNGRY"));
			}
		}
		return false;
	}
}