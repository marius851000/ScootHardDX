/*
Copyright 2021 Sanya K. Waffles

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// One-liner for mirror
class SHDX_MirrorOneLiner : SecActUseWall
{
	Default
	{
		//$Category "Controllers"
		//$Title "Mirror One-Liner"
		//$Sprite internal:action
	}
	
	void SendMirrorOL(SHDX_PlayerPawn pp)
	{
		String mirrorsnd;
		mirrorsnd = String.Format("%s/%s%d", pp.OneLinerPrefix, "mirror", Random[OneLiner](1,3));
		
		pp.OneLinerInit(mirrorsnd, OLSSF_NOGRIN);
	}
	
	mixin SHDX_TriggerOverride;
	
	override bool TriggerAction (Actor triggerer, int activationType)
	{
		if ((activationType & health) && CanTrigger(triggerer))
		{
			let shdxpl = SHDX_PlayerPawn(triggerer);
			if (shdxpl && shdxpl.player)
			{
				SendMirrorOL(shdxpl);
			}
		}
		return false;
	}
}

// SHSDL One-liner
class SHDX_SHSDLEasterEggOneLiner : SHDX_Actor 
{
	Default
	{
		//$Category "Controllers"
		//$Title "Scoot Hard SDL Easter Egg One-Liner"
		//$Sprite internal:action
		
		Radius 24;
		Height 32;
	}
	
	void SendEasterEggOL(SHDX_PlayerPawn pp)
	{
		String eggol;	// Darlia?
		eggol = String.Format("%s/%s", pp.OneLinerPrefix, "thatsme");
		
		pp.OneLinerInit(eggol, OLSSF_FORCEONELINER|OLSSF_NOGRIN);
	}
	
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			SendEasterEggOL(shdxpl);
		}
		return false;
	}
}

// Tchernobog One-liner
class SHDX_ILiveAgain : SHDX_Actor 
{
	Default
	{
		//$Category "Controllers"
		//$Title "I Live Again"
		//$Sprite internal:action
		
		Radius 24;
		Height 32;
	}
	
	void SendEasterEggOL(SHDX_PlayerPawn pp)
	{
		String eggol;	// Darlia?
		eggol = String.Format("%s/%s", pp.OneLinerPrefix, "iliveagain");
		
		pp.OneLinerInit(eggol, OLSSF_FORCEONELINER|OLSSF_NOGRIN);
	}
	
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			SendEasterEggOL(shdxpl);
		}
		return false;
	}
}

// Soda machine One-liner
class SHDX_SodaMachine : SHDX_Actor 
{
	Default
	{
		//$Category "Controllers"
		//$Title "Soda Machine"
		//$Sprite internal:action
		
		Radius 24;
		Height 32;
	}
	
	void SendEasterEggOL(SHDX_PlayerPawn pp)
	{
		String eggol;	// Darlia?
		eggol = String.Format("%s/%s", pp.OneLinerPrefix, "sodamachine");
		
		pp.OneLinerInit(eggol, OLSSF_FORCEONELINER|OLSSF_NOGRIN);
	}
	
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			SendEasterEggOL(shdxpl);
		}
		return false;
	}
}


// Polybius One-liner
class SHDX_Polybius : SHDX_Actor 
{
	Default
	{
		//$Category "Controllers"
		//$Title "Polybius"
		//$Sprite internal:action
		
		Radius 24;
		Height 32;
	}
	
	void SendEasterEggOL(SHDX_PlayerPawn pp)
	{
		String eggol;	// Darlia?
		eggol = String.Format("%s/%s", pp.OneLinerPrefix, "polybius");
		
		pp.OneLinerInit(eggol, OLSSF_FORCEONELINER|OLSSF_NOGRIN);
	}
	
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			SendEasterEggOL(shdxpl);
		}
		return false;
	}
}

// Graf please do not sue me
class SHDX_LeNo : SHDX_Actor 
{
	Default
	{
		//$Category "Controllers"
		//$Title "Le No"
		//$Sprite internal:action
		
		Radius 24;
		Height 32;
	}
	
	void SendEasterEggOL(SHDX_PlayerPawn pp)
	{
		String eggol;	// Darlia?
		eggol = String.Format("%s/%s", pp.OneLinerPrefix, "ehno");
		
		pp.OneLinerInit(eggol, OLSSF_FORCEONELINER|OLSSF_NOGRIN);
	}
	
	override bool Used(Actor user)
	{	
		let shdxpl = SHDX_PlayerPawn(user);
		if (shdxpl && shdxpl.player)
		{
			SendEasterEggOL(shdxpl);
		}
		return false;
	}
}